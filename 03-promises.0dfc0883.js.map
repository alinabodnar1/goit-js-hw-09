{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA2B3C,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQR,EAAAc,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAEnEG,EAAKT,EAAAc,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAElEA,E,IApCIJ,SAASC,cAAc,QAC/Be,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAiEC,EAAnBF,EAAMG,cAA5CC,SAAYjB,EAAKe,EAALf,MAAOkB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OACjCC,QAAQC,IAAI,UAAgCX,OAAtBV,EAAMsB,MAAM,YAAiCZ,OAAvBQ,EAAKI,MAAM,cAAyBZ,OAAbS,EAAOG,QAM1E,IAJA,IAAMC,EAAeC,OAAOxB,EAAMsB,OAC5BG,EAAcD,OAAON,EAAKI,OAC1BI,EAAgBF,OAAOL,EAAOG,OAE3BK,EAAI,EAAGA,GAAKD,EAAgB,EAAGC,GAAK,EAAG,CAG5C7B,EAAc6B,EAFLF,EAAcE,EAAIJ,GAGxBK,MAAK,SAAAC,G,IAAGC,EAACD,EAADC,EAAGC,EAACF,EAADE,EACVrC,EAAAc,OAAOC,QAAQ,uBAAiCC,OAARoB,EAAE,QAAQpB,OAAFqB,EAAE,M,IAEnDC,OAAM,SAAAH,G,IAAGC,EAACD,EAADC,EAAGC,EAACF,EAADE,EACXrC,EAAAc,OAAOG,QAAQ,sBAAgCD,OAARoB,EAAE,QAAQpB,OAAFqB,EAAE,M,IAGzDlB,EAAMG,cAAciB,O","sources":["src/js/03-promises.js"],"sourcesContent":["// import { number } from 'joi';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('form');\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { elements: { delay, step, amount } } = event.currentTarget;\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n\n  const delayPromise = Number(delay.value);\n  const stepPromise = Number(step.value);\n  const amountPromise = Number(amount.value);\n  \n  for (let i = 0; i <= amountPromise - 1; i += 1) {\n      let s =  stepPromise * i + delayPromise;\n\n      createPromise(i, s)\n        .then(({ i, s }) => {\n          Notify.success(`✅ Fulfilled promise ${i} in ${s}ms`);\n        })\n        .catch(({ i, s }) => {\n          Notify.failure(`❌ Rejected promise ${i} in ${s}ms`);\n        });\n    }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {  \n        if (shouldResolve) {\n          resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n        } else {\n          reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n        }\n      }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","console","log","value","delayPromise","Number","stepPromise","amountPromise","i1","then","param","i","s","catch","reset"],"version":3,"file":"03-promises.0dfc0883.js.map"}