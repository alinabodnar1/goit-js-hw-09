{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA4B3C,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IArCIJ,SAASC,cAAc,QAC/BW,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAiEC,EAAnBF,EAAMG,cAA5CC,SAAYb,EAAKW,EAALX,MAAOc,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OACjCC,QAAQC,IAAI,UAAgCC,OAAtBlB,EAAMmB,MAAM,YAAiCD,OAAvBJ,EAAKK,MAAM,cAAyBD,OAAbH,EAAOI,QAM1E,IAJA,IAAMC,EAAeC,OAAOrB,EAAMmB,OAC5BG,EAAcD,OAAOP,EAAKK,OAC1BI,EAAgBF,OAAON,EAAOI,OAE3BK,EAAW,EAAGA,GAAYD,EAAgB,EAAGC,GAAY,EAAG,CACnE,IAAIC,EAAIH,EAAcE,EAAWJ,EAEjCJ,QAAQC,IAAIQ,GAEV3B,EAAc0B,EAAUJ,GACrBM,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAU6B,EAAYD,EAAZC,aACjBlC,EAAAmC,OAAOC,QAAQ,uBAAwCZ,OAAfnB,EAAS,QAAmBmB,OAAbU,EAAa,O,IAErEG,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAU6B,EAAYD,EAAZC,aAClBlC,EAAAmC,OAAOG,QAAQ,sBAAqCd,OAAfnB,EAAS,QAAmBmB,OAAbU,EAAa,O,IAGzEnB,EAAMG,cAAcqB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('form');\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { elements: { delay, step, amount } } = event.currentTarget;\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n\n  const delayPromise = Number(delay.value);\n  const stepPromise = Number(step.value);\n  const amountPromise = Number(amount.value);\n  \n  for (let position = 0; position <= amountPromise - 1; position += 1) {\n    let s = stepPromise * position + delayPromise;\n    \n    console.log(s);\n\n      createPromise(position, delayPromise)\n        .then(({ position, delayPromise }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delayPromise} ms`);\n        })\n        .catch(({ position, delayPromise }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delayPromise} ms`);\n        });\n    }\n  event.currentTarget.reset();\n}\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {  \n        if (shouldResolve) {\n          resolve({position, delay});\n        } else {\n          reject({position, delay});\n        }\n      }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","console","log","concat","value","delayPromise1","Number","stepPromise","amountPromise","position1","s","then","param","delayPromise","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.f186aa83.js.map"}