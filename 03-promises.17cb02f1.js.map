{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA0B3C,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAnCIJ,SAASC,cAAc,QAC/BW,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAiEC,EAAnBF,EAAMG,cAA5CC,SAAYC,EAAKH,EAALX,MAAOe,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OACjCC,QAAQC,IAAI,UAAgCC,OAAtBL,EAAMM,MAAM,YAAiCD,OAAvBJ,EAAKK,MAAM,cAAyBD,OAAbH,EAAOI,QAM1E,IAJA,IAAIC,EAAeC,OAAOR,EAAMM,OAC1BG,EAAcD,OAAOP,EAAKK,OAC1BI,EAAgBF,OAAON,EAAOI,OAE3BK,EAAW,EAAGA,GAAYD,EAAeC,GAAY,EAC1D3B,EAAc2B,EAAUJ,GACrBK,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBN,EAAAkC,OAAOC,QAAQ,uBAAwCV,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,O,IAE9D8B,OAAM,SAAAH,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBN,EAAAkC,OAAOG,QAAQ,sBAAqCZ,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,O,IAEhEqB,GAAgBE,EAElBd,EAAMG,cAAcoB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('form');\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { elements: { delay, step, amount } } = event.currentTarget;\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n\n  let delayPromise = Number(delay.value);\n  const stepPromise = Number(step.value);\n  const amountPromise = Number(amount.value);\n  \n  for (let position = 1; position <= amountPromise; position += 1) {\n      createPromise(position, delayPromise)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n        });\n    delayPromise += stepPromise;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {  \n        if (shouldResolve) {\n          resolve({position, delay});\n        } else {\n          reject({position, delay});\n        }\n      }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","console","log","concat","value","delayPromise","Number","stepPromise","amountPromise","position1","then","param","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.17cb02f1.js.map"}