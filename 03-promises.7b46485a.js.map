{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA0B3C,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAE1BA,EAAM,G,CAnCFJ,SAASC,cAAc,QAC/BW,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IAAaL,EAAMM,cACpDC,QAAQC,IAAI,UAAUL,EAAMM,gBAAgBL,EAAKK,kBAAkBJ,EAAOI,SAE1E,IAAIC,EAAeC,OAAOR,EAAMM,OAChC,MAAMG,EAAcD,OAAOP,EAAKK,OAC1BI,EAAgBF,OAAON,EAAOI,OAEpC,IAAK,IAAIK,EAAW,EAAGA,GAAYD,EAAeC,GAAY,EAC1DzB,EAAcyB,EAAUJ,GACrBK,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBN,EAAA+B,OAAOC,QAAQ,uBAAqB3B,QAAiBC,OAAW,IAEjE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBN,EAAA+B,OAAOG,QAAQ,sBAAoB7B,QAAeC,OAAW,IAEnEmB,GAAgBE,EAElBZ,EAAMM,cAAcc,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('form');\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { elements: { delay, step, amount } } = event.currentTarget;\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n\n  let delayPromise = Number(delay.value);\n  const stepPromise = Number(step.value);\n  const amountPromise = Number(amount.value);\n  \n  for (let position = 1; position <= amountPromise; position += 1) {\n      createPromise(position, delayPromise)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n        });\n    delayPromise += stepPromise;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {  \n        if (shouldResolve) {\n          resolve({position, delay});\n        } else {\n          reject({position, delay});\n        }\n      }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","console","log","value","delayPromise","Number","stepPromise","amountPromise","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.7b46485a.js.map"}