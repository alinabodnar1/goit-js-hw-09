{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAEmBC,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBACrBD,SAASC,cAAc,wBA2B3C,SAASC,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQR,EAAAc,OAAOC,QAAQ,uBAAqBV,QAAiBC,QAE3DG,EAAKT,EAAAc,OAAOE,QAAQ,sBAAoBX,QAAeC,OAAW,GAErEA,EAAM,G,CApCFJ,SAASC,cAAc,QAC/Bc,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,MAAQC,UAAUd,MAAEA,EAAKe,KAAEA,EAAIC,OAAEA,IAAaJ,EAAMK,cACpDC,QAAQC,IAAI,UAAUnB,EAAMoB,gBAAgBL,EAAKK,kBAAkBJ,EAAOI,SAE1E,MAAMC,EAAeC,OAAOtB,EAAMoB,OAC5BG,EAAcD,OAAOP,EAAKK,OAC1BI,EAAgBF,OAAON,EAAOI,OAEpC,IAAK,IAAIK,EAAI,EAAGA,GAAKD,EAAgB,EAAGC,GAAK,EAAG,CAG5C3B,EAAc2B,EAFLF,EAAcE,EAAIJ,GAGxBK,MAAK,EAACC,EAAEA,EAACC,EAAEA,MACVlC,EAAAc,OAAOC,QAAQ,uBAAqBkB,QAAUC,MAAM,IAErDC,OAAM,EAACF,EAAEA,EAACC,EAAEA,MACXlC,EAAAc,OAAOE,QAAQ,sBAAoBiB,QAAUC,MAAM,G,CAG3DhB,EAAMK,cAAca,O","sources":["src/js/03-promises.js"],"sourcesContent":["// import { number } from 'joi';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('form');\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const { elements: { delay, step, amount } } = event.currentTarget;\n  console.log(`Delay: ${delay.value}, Step: ${step.value}, Amount: ${amount.value}`);\n\n  const delayPromise = Number(delay.value);\n  const stepPromise = Number(step.value);\n  const amountPromise = Number(amount.value);\n  \n  for (let i = 0; i <= amountPromise - 1; i += 1) {\n      let s =  stepPromise * i + delayPromise;\n\n      createPromise(i, s)\n        .then(({ i, s }) => {\n          Notify.success(`✅ Fulfilled promise ${i} in ${s}ms`);\n        })\n        .catch(({ i, s }) => {\n          Notify.failure(`❌ Rejected promise ${i} in ${s}ms`);\n        });\n    }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {  \n        if (shouldResolve) {\n          resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n        } else {\n          reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n        }\n      }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","failure","addEventListener","event","preventDefault","elements","step","amount","currentTarget","console","log","value","delayPromise","Number","stepPromise","amountPromise","i1","then","i","s","catch","reset"],"version":3,"file":"03-promises.349676dc.js.map"}